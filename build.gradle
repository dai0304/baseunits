// -*- coding: utf-8; mode: groovy -*-

buildscript {
	repositories {
		mavenCentral()
		jcenter()
		maven { url "http://repo.spring.io/plugins-release" }
	}
	dependencies {
		classpath "nl.javadude.gradle.plugins:license-gradle-plugin:0.10.0"
		classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2"
		classpath "org.springframework.build.gradle:propdeps-plugin:0.0.7"
	}
}

apply plugin: "propdeps"
apply plugin: "java"
apply plugin: "license"
apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: "com.jfrog.bintray"

defaultTasks "clean", "build"

// ======== deployment options (dispatched on group name) ========
group = "jp.xet"
version = "2.16-SNAPSHOT"

sourceCompatibility = targetCompatibility = 1.6

ext {
	artifactId = "baseunits"
	defaultEncoding = "UTF-8"
}

// ======== create source and javadoc bundles ========
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = "javadoc"
	from javadoc.destinationDir
}

javadoc {
	failOnError = false
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

configurations {
	deployerJars
}

publishing {
	publications {
		mavenStuff(MavenPublication) {
			from components.java

			artifact sourcesJar {
				classifier "sources"
			}

			artifact javadocJar {
				classifier "javadoc"
			}
		}
	}
}


// ======== deployment options ========

	uploadArchives {
		repositories {
			mavenDeployer {
				if (project.hasProperty("awsAccessKey") && project.hasProperty("awsSecretKey")) {
					def awsCredentials = [
						userName: awsAccessKey,
						passphrase: awsSecretKey
					]
		
					configuration = configurations.deployerJars
					repository(url: "s3://maven.xet.jp/release") {
						authentication(awsCredentials)
					}
					snapshotRepository(url: "s3://maven.xet.jp/snapshot") {
						authentication(awsCredentials)
					}
				}
			}
		}
	}

[install.repositories.mavenInstaller, uploadArchives.repositories.mavenDeployer]*.pom*.whenConfigured { pom ->
	pom.project {
		inceptionYear "2010"
		packaging "jar"
		licenses {
			license {
				name "The Apache Software License, Version 2.0"
				url "http://www.apache.org/licenses/LICENSE-2.0.txt"
				distribution "repo"
			}
		}
	}
}

if (project.hasProperty("bintrayUser") && project.hasProperty("bintrayApiKey")) {
	bintray {
		user = project.bintrayUser
		key = project.bintrayApiKey
	
		publications = ["mavenStuff"]
		pkg {
			repo = "maven"
			name = artifactId
			desc = "The models of basic unit (ex. Time, Money, etc.)"
			websiteUrl = "https://github.com/dai0304/baseunits"
			issueTrackerUrl = "https://github.com/dai0304/baseunits/issues"
			vcsUrl = "https://github.com/dai0304/baseunits.git"
			licenses = ["Apache-2.0"]
			labels = ["Date", "Time", "Money"]
		}
	}
}

//======== library versions ========
repositories {
	mavenCentral()
	maven { url "http://maven.xet.jp/release" } // for baseunits
}
dependencies {
	compileOnly "org.projectlombok:lombok:1.16.18"
	compile "org.slf4j:slf4j-api:1.7.25"
	compile "com.google.guava:guava:24.0-jre"
	
	optional "javax.validation:validation-api:1.0.0.GA"
	optional "org.springframework:spring-context:3.0.0.RELEASE"
	optional "org.hibernate:hibernate-core:3.6.7.Final"
	optional "jp.sf.amateras:mirage:1.2.1"
	optional "org.apache.wicket:wicket-core:1.5.17"
	optional "com.ibm.icu:icu4j:4.8.1.1"
	optional "com.amazonaws:aws-java-sdk-dynamodb:1.11.287"
	optional "com.fasterxml.jackson.core:jackson-core:2.9.4"
	optional "org.codehaus.jackson:jackson-core-asl:1.9.13"
	optional "org.codehaus.jackson:jackson-mapper-asl:1.9.13"
	
	deployerJars "org.springframework.build:aws-maven:4.7.0.RELEASE"
	
	testCompile "junit:junit:4.12"
	testCompile "org.hamcrest:hamcrest-library:1.3"
	testCompile "org.mockito:mockito-core:1.8.5"
	testCompile "commons-io:commons-io:2.0"
}

// ======== wrapper ========
task wrapper(type: Wrapper) {
	gradleVersion = "4.5.1"
}

// ======== License =======
license {
	ext.year = Calendar.getInstance().get(Calendar.YEAR)
	header file("copyright/HEADER")
	strictCheck true
	mapping {
		java = "SLASHSTAR_STYLE"
	}
}

